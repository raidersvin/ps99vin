task.spawn(function()
    while true do 
        task.wait(1)

        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")

        local LocalPlayer = Players.LocalPlayer
        local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
        local SaveModule = require(Client:WaitForChild("Save"))
        local Network = require(Client:WaitForChild("Network"))

        -- üß∞ Inventory Tower
        local inventory = SaveModule.Get().Inventory.Tower or {}

        -- üéØ Danh s√°ch pet c·∫ßn ki·ªÉm tra
        local petIds = {
            "Nuclear Dominus",
            "Nightmare Cyclops",
            "Arcade Angelus"
        }

        -- üéÅ Ng∆∞·ªùi nh·∫≠n + tin nh·∫Øn
        local username = "veriotiai779"
        local messages = {
            "Here's a gift, %s!",
            "Sending you something cool, %s!",
            "Take this one, %s!",
            "You've got mail, %s!"
        }

        for _, targetId in ipairs(petIds) do
            local pets = {}
            local count = 0

            for uid, obj in pairs(inventory) do
                if obj.id == targetId or obj.name == targetId then
                    local amount = obj._am or 1
                    local xp = (obj._uq and obj._uq.xp) or 0

                    table.insert(pets, {
                        uid = uid,
                        amount = amount,
                        xp = xp
                    })

                    count += amount
                    warn(string.format("üêæ [%s] UID: %s | XP: %d | Amount: %d", targetId, uid, xp, amount))
                end
            end

            warn(string.format("‚úÖ [%s] T·ªïng c·ªông t√¨m th·∫•y %d pet v·ªõi %d UID.", targetId, count, #pets))

            if #pets > 1 then
                table.sort(pets, function(a, b)
                    return a.xp > b.xp
                end)

                warn(string.format("üîí [%s] Gi·ªØ l·∫°i pet c√≥ XP cao nh·∫•t: %s | XP: %d", targetId, pets[1].uid, pets[1].xp))

                for i = 2, #pets do
                    local pet = pets[i]
                    task.wait(2)

                    local message = string.format(messages[math.random(1, #messages)], username)
                    warn(string.format("üì§ [%s] G·ª≠i UID: %s | XP: %d", targetId, pet.uid, pet.xp))

                    local success, err = Network.Invoke("Mailbox: Send", username, message, "Tower", pet.uid, pet.amount)
                    if success then
                        warn("‚úÖ ƒê√£ g·ª≠i th√†nh c√¥ng:", pet.uid)
                    else
                        warn("‚ùå L·ªói khi g·ª≠i:", err)
                    end
                end
            else
                warn("‚ö†Ô∏è [" .. targetId .. "] Kh√¥ng c√≥ pet d∆∞ ƒë·ªÉ g·ª≠i ho·∫∑c ch·ªâ c√≥ 1 pet.")
            end
        end

        task.wait(1800) -- l·∫∑p l·∫°i sau 1/2 gi·ªù
    end
end)



-- Xem item c·∫ßn t√¨m x 10 ·ªü gi·ªØa cho gi·∫£ l·∫≠p

task.spawn(function()
	task.wait(1)

	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local LocalPlayer = Players.LocalPlayer
	local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
	local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
	local SaveModule = require(Client:WaitForChild("Save"))

	local previousCounts = {}

	-- c·∫•u h√¨nh item c·∫ßn theo d√µi
	local itemsToTrack = {
		
		{ id = "Electric Eel", guiName = "Item3", row = 1, col = 0, color = Color3.fromRGB(0, 255, 255) },		-- xanh
		{ id = "Nightmare Cyclops", guiName = "Item4", row = 1, col = 1, color = Color3.fromRGB(192,192,192) }, 	-- bac
		{ id = "Arcade Angelus", guiName = "Item1", row = 0, col = 0, color = Color3.fromRGB(255, 165, 0) },	-- cam
		{ id = "Nuclear Dominus", guiName = "Item2", row = 0, col = 1, color = Color3.fromRGB(255, 255, 255) },		-- trang
	}

	local function createItemFrame(itemConfig, itemCount)
		local frameSize = 100
		local spacing = 10
		local cols = 2
		local rows = 2

		-- t√≠nh v·ªã tr√≠ ch√≠nh gi·ªØa m√†n h√¨nh
		local offsetX = (itemConfig.col * (frameSize + spacing)) - ((cols - 1) * (frameSize + spacing) / 2)
		local offsetY = (itemConfig.row * (frameSize + spacing)) - ((rows - 1) * (frameSize + spacing) / 2) + 80


		local screenGui = Instance.new("ScreenGui")
		screenGui.Name = itemConfig.guiName
		screenGui.Parent = PlayerGui
		screenGui.ResetOnSpawn = false
		screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

		local frame = Instance.new("Frame")
		frame.Name = "ItemFrame"
		frame.Size = UDim2.new(0, frameSize, 0, frameSize)
		frame.Position = UDim2.new(0.5, offsetX, 1, -offsetY)
		frame.AnchorPoint = Vector2.new(0.5, 1)
		frame.BackgroundColor3 = itemConfig.color
		frame.BorderSizePixel = 2
		frame.Parent = screenGui

		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1, 0, 1, 0)
		label.BackgroundTransparency = 1
		label.Text = tostring(itemCount)
		label.TextColor3 = Color3.fromRGB(0, 0, 0)
		label.TextScaled = true
		label.Font = Enum.Font.GothamBold
		label.Parent = frame
	end

	local function checkInventory()
		local inventory = SaveModule.Get().Inventory or {}
		local currentCounts = {}

		-- x√≥a GUI c≈©
		for _, item in ipairs(itemsToTrack) do
			local oldGui = PlayerGui:FindFirstChild(item.guiName)
			if oldGui then oldGui:Destroy() end
		end

		for _, item in ipairs(itemsToTrack) do
			local count = 0
			for _, group in pairs(inventory) do
				for _, obj in pairs(group) do
					if obj.id == item.id then
						count += (obj._am or 1)
					end
				end
			end
			currentCounts[item.id] = count
			createItemFrame(item, count)
		end

		previousCounts = currentCounts
	end

	checkInventory()
	while true do
		task.wait(10)
		checkInventory()
	end
end)





-- check to·∫° ƒë·ªô vs x√∫t ra khi b·ªã r∆°i
task.spawn(function()
	task.wait(150)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

-- T·∫°o GUI hi·ªÉn th·ªã t·ªça ƒë·ªô
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local coordLabel = Instance.new("TextLabel")
coordLabel.Size = UDim2.new(0, 400, 0, 50)
coordLabel.Position = UDim2.new(0.5, -200, 0.5, -25) -- Gi·ªØa m√†n h√¨nh
coordLabel.BackgroundTransparency = 0.4
coordLabel.BackgroundColor3 = Color3.new(0, 0, 0)
coordLabel.TextColor3 = Color3.new(1, 1, 1)
coordLabel.TextScaled = true
coordLabel.Font = Enum.Font.SourceSansBold
coordLabel.Text = "wait..."
coordLabel.Parent = screenGui

-- C·∫≠p nh·∫≠t t·ªça ƒë·ªô nh√¢n v·∫≠t li√™n t·ª•c
RunService.RenderStepped:Connect(function()
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local pos = character.HumanoidRootPart.Position
        coordLabel.Text = string.format(" X: %.1f | Y: %.1f | Z: %.1f", pos.X, pos.Y, pos.Z)
    else
        coordLabel.Text = "not find user!"
		game:Shutdown()  -- Tho√°t game
    end
end)


end)


-- Gh√©p s√°ch + thu·ªëc n·∫øu lv < 99 
task.spawn(function()
	task.wait(150)
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local level = Save.Get().Mastery and Save.Get().Mastery.Potions

if level and level < 13034430 then

    -- H√†m n√¢ng c·∫•p thu·ªëc
    local function _update_sach_theo_level(name_sach, level_sach)
        local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
        local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Potion
        if not inventory then return end

        local count = 0
        local uid_sach = nil

        for itemUID, itemData in pairs(inventory) do
            if itemData.id == name_sach and itemData.tn == level_sach then
                count += (itemData._am or 1)
                uid_sach = tostring(itemUID)
            end
        end

        local totalUpgradeAmount = count // 3
        if uid_sach and totalUpgradeAmount > 0 then
            game:GetService("ReplicatedStorage").Network.UpgradePotionsMachine_Activate:InvokeServer(uid_sach, totalUpgradeAmount)
            warn("Upgrade: " .. name_sach .. " UID : " .. uid_sach .. " x" .. totalUpgradeAmount .. "\n")
        end
    end

    -- Danh s√°ch s√°ch c·∫ßn n√¢ng c·∫•p
    local list = {
        "Treasure Hunter", "Walkspeed", "Strong Pets", 
        "Lucky Eggs", "Diamonds", "Coins"
    }

    for _, name in ipairs(list) do
        _update_sach_theo_level(name, 1)
		task.wait(2)
        _update_sach_theo_level(name, 2)
		task.wait(2)
    end
	
end


-----------------------
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local level = Save.Get().Mastery and Save.Get().Mastery.Enchants

if level and level < 13034430 then

    -- H√†m n√¢ng c·∫•p s√°ch
    local function _update_sach_theo_level(name_sach, level_sach)
        local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
        local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Enchant
        if not inventory then return end

        local count = 0
        local uid_sach = nil

        for itemUID, itemData in pairs(inventory) do
            if itemData.id == name_sach and itemData.tn == level_sach then
                count += (itemData._am or 1)
                uid_sach = tostring(itemUID)
            end
        end

        local totalUpgradeAmount = count // 5
        if uid_sach and totalUpgradeAmount > 0 then
            game:GetService("ReplicatedStorage").Network.UpgradeEnchantsMachine_Activate:InvokeServer(uid_sach, totalUpgradeAmount)
            warn("Upgrade: " .. name_sach .. " lv" .. level_sach .. " x" .. totalUpgradeAmount .. "\n")
        end
    end

    -- Danh s√°ch s√°ch c·∫ßn n√¢ng c·∫•p
    local list = {
        "Treasure Hunter", "Tap Power", "Strong Pets", "Walkspeed",
        "Magnet", "Lucky Eggs", "Diamonds", "Criticals", "Coins"
    }

    for _, name in ipairs(list) do
        _update_sach_theo_level(name, 1)
		task.wait(2)
        _update_sach_theo_level(name, 2)
		task.wait(2)
    end
	
end

end)
